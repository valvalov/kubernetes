{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kubernetes Docs","text":"<p>Kubernetes  handbook</p>"},{"location":"administration/RBAC/","title":"Rbac","text":"<p>Placeholder content.</p>"},{"location":"administration/monitoring/","title":"Monitoring","text":"<p>Placeholder content.</p>"},{"location":"administration/user-management/","title":"User Management","text":"<p>Placeholder content.</p>"},{"location":"install/","title":"index","text":"<p>Placeholder content.</p>"},{"location":"install/airgap/manual-image-import/","title":"manual-image-import","text":"<p>Placeholder content.</p>"},{"location":"install/airgap/registry/","title":"registry","text":"<p>Placeholder content.</p>"},{"location":"install/common/install-kube-tools/","title":"Install Kubernetes Tools","text":""},{"location":"install/common/install-kube-tools/#introduction","title":"Introduction","text":"<p>In this section, you will install the core Kubernetes tools: <code>kubeadm</code>, <code>kubelet</code>, and <code>kubectl</code>. These components are essential for managing and operating your Kubernetes cluster effectively.</p>"},{"location":"install/common/install-kube-tools/#check-latest-kubernetes-release","title":"Check Latest Kubernetes Release","text":"<p>It is recommended to check the latest available Kubernetes release before installing the packages.</p> <pre><code>curl -L -s https://dl.k8s.io/release/stable.txt\n</code></pre>"},{"location":"install/common/install-kube-tools/#add-kubernetes-package-repository","title":"Add Kubernetes Package Repository","text":"<p>First, add the official Kubernetes APT repository to your system.</p> 1.321.33 <pre><code>sudo apt update\nsudo apt install -y apt-transport-https ca-certificates curl\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\necho \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\nsudo apt update\n</code></pre> <pre><code>sudo apt update\nsudo apt install -y apt-transport-https ca-certificates curl\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\necho \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\nsudo apt update\n</code></pre> <p>Note</p> <p>Make sure <code>/etc/apt/keyrings/</code> exists before saving the GPG key.</p>"},{"location":"install/common/install-kube-tools/#install-kubeadm-kubelet-and-kubectl","title":"Install kubeadm, kubelet, and kubectl","text":"<p>Install the essential Kubernetes components:</p> <pre><code>sudo apt install -y kubelet kubeadm kubectl\n</code></pre> <p>After installation, prevent them from being automatically upgraded:</p> <pre><code>sudo apt-mark hold kubelet kubeadm kubectl\n</code></pre> <p>Tip</p> <p>Holding these packages prevents unexpected version upgrades that could break your cluster.</p>"},{"location":"install/common/install-kube-tools/#enable-kubelet-service","title":"Enable kubelet Service","text":"<p>Enable the <code>kubelet</code> service to start automatically at boot:</p> <pre><code>sudo systemctl enable kubelet\n</code></pre> <p>Warning</p> <p>Note that <code>kubelet</code> will remain in a crash loop until you initialize your cluster with <code>kubeadm init</code>.</p>"},{"location":"install/common/install-kube-tools/#conclusion","title":"Conclusion","text":"<p>You now have the essential Kubernetes tools installed and configured. The next step is to initialize your Kubernetes control plane using <code>kubeadm init</code>.</p>"},{"location":"install/common/kvm-infra/","title":"Ubuntu Cloud-Init Setup with KVM","text":""},{"location":"install/common/kvm-infra/#overview","title":"Overview","text":"<p>This guide describes how to automatically deploy Ubuntu cloud images on a KVM hypervisor using cloud-init and a simple script.</p>"},{"location":"install/common/kvm-infra/#requirements","title":"Requirements","text":"<ul> <li>A Linux host with:</li> <li>KVM / QEMU installed: <code>virt-install</code>, <code>genisoimage</code>, <code>cloud-utils</code></li> <li>A configured user with sudo privileges</li> <li>DHCP network setup</li> <li>Automatic NTP time synchronization</li> <li>Ubuntu Cloud Image (cloud-init enabled)</li> </ul> <p>Install the required packages:</p> <pre><code>sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager genisoimage cloud-utils\n</code></pre> <p>or for Fedora:</p> <pre><code>sudo dnf install qemu-kvm libvirt virt-install genisoimage cloud-utils-growpart\n</code></pre>"},{"location":"install/common/kvm-infra/#download-ubuntu-cloud-image","title":"Download Ubuntu Cloud Image","text":"<p>Download the cloud image for your desired Ubuntu version:</p> <pre><code>wget https://cloud-images.ubuntu.com/plucky/current/plucky-server-cloudimg-amd64.img -O ubuntu-cloud.img\n</code></pre> <p>(Replace \"plucky\" with \"focal\", \"noble\" etc. if needed.)</p>"},{"location":"install/common/kvm-infra/#deploy-the-vms","title":"Deploy the VMs","text":"<p>Create script <code>install_vm.sh</code></p> <pre><code>#!/bin/bash\n# install_vm.sh - Automated Cloud-Init Ubuntu VM creation script for KVM\n#\n# Usage:\n#   sudo /home/user/install_vm.sh &lt;vm-prefix&gt; &lt;count&gt; &lt;network-mode&gt; &lt;network-source&gt;\n#\n# Example:\n#   sudo /home/user/install_vm.sh vm 2 direct eno1\n#   Will create two VMs (vm1 and vm2) directly connected to KVM interface eno1\n#\n# Parameters:\n#   &lt;vm-prefix&gt;       Prefix for VM names (e.g., 'vm' -&gt; vm1, vm2, ...)\n#   &lt;count&gt;           Number of VMs to create\n#   &lt;network-mode&gt;    Network connection type: 'direct', 'bridge', or 'network'\n#   &lt;network-source&gt;  Network source interface or bridge name (e.g., eno1, br0, default)\n#\n# Notes:\n#   - Requires KVM, libvirt, virt-install, and cloud-init to be installed\n#   - Must be run with sudo/root privileges\n#   - Backing image must exist at configured location\n#\n# === Configuration Parsing ===\nfunction parse_arguments() {\n  VM_PREFIX=\"$1\"\n  VM_COUNT=\"$2\"\n  NETWORK_MODE=\"$3\"    # direct, network, bridge\n  NETWORK_SOURCE=\"$4\"  # eno1, lo, &lt;bridge name&gt;\n\n  VM_MEMORY=\"3072\"\n  VM_VCPUS=\"2\"\n  VM_DISK_SIZE=\"10G\"\n  BACKING_FILE=\"/backing_files/plucky-server-cloudimg-amd64.img\"\n  IMAGES_DIR=\"/var/lib/libvirt/images\"\n  CSV_REPORT=\"/tmp/vm_creation_report.csv\"\n  SSH_PUBLIC_KEY=\"$HOME/.ssh/id_ed25519.pub\"\n  OS_VARIANT=\"ubuntu25.04\"    # virt-install --osinfo list\n\n  # Checking if we are root\n  if [ \"$EUID\" -ne 0 ]; then\n    echo \"Error: This script must be run as root (use sudo).\"\n    exit 4\n  fi\n\n  # Checking for availability of backing file\n  if [ ! -f \"$BACKING_FILE\" ]; then\n    echo \"Error: Backing file $BACKING_FILE not found!\"\n    exit 2\n  fi\n\n  # SSH key verification\n  if [ ! -f \"$SSH_PUBLIC_KEY\" ]; then\n    echo \"Error: SSH public key not found at $SSH_PUBLIC_KEY\"\n    exit 3\n  fi\n\n  # Check for mandatory basic parameters\n  if [ -z \"$VM_PREFIX\" ] || [ -z \"$VM_COUNT\" ] || [ -z \"$NETWORK_MODE\" ] || [ -z \"$NETWORK_SOURCE\" ]; then\n    echo \"Usage: $0 &lt;vm-prefix&gt; &lt;count&gt; &lt;network-mode&gt; &lt;network-source&gt;\"\n    exit 1\n  fi\n}\n\nfunction initialize_report() {\n  echo \"VM Name,IP Address,Network Mode,Status\" &gt; \"$CSV_REPORT\"\n}\n\nfunction prepare_disk() {\n  echo \"Creating disk for $VM_NAME...\"\n  qemu-img create -f qcow2 -F qcow2 -b \"$BACKING_FILE\" \"$IMAGES_DIR/${VM_NAME}.qcow2\" \"$VM_DISK_SIZE\"\n}\n\nfunction create_cloudinit_iso() {\n  echo \"Creating cloud-init ISO for $VM_NAME...\"\n\n  CLOUDINIT_DIR=\"/tmp/${VM_NAME}-cloudinit\"\n  mkdir -p \"$CLOUDINIT_DIR\"\n\n  SSH_KEY_CONTENT=$(cat \"$SSH_PUBLIC_KEY\")\n\n  cat &gt; \"$CLOUDINIT_DIR/user-data\" &lt;&lt;EOF\n#cloud-config\nhostname: $VM_NAME\nusers:\n  - name: clouduser\n    gecos: Cloud User\n    sudo: [\"ALL=(ALL) NOPASSWD:ALL\"]\n    shell: /bin/bash\n    lock_passwd: false\n    ssh_authorized_keys:\n      - $SSH_KEY_CONTENT\nchpasswd:\n  list: |\n    root:\\$6\\$uy9k8c33eOOnaerZ\\$2QJ1xaBi.7KxVECzo.GOiE/yfhcEiDAjn2Zmpkm3.za/AslJjf8ZTFcQtFJuxWgQhQt2y1M4c.mcCLBws6q4Y0\n    clouduser:\\$6\\$q0y5NM6jS0hvrAPq\\$GAxSuOaeh.aTzxP7vTjN3G06YQZRULraVOi0Gql3T6HuFLP6ayoOpewws1Rgz5yfsrxu2jxhWUIn4bHFt7uz4.\n  expire: false\n  encrypt: false\nssh_pwauth: false\npackage_update: true\npackage_upgrade: true\npackages:\n  - qemu-guest-agent\nruncmd:\n  - systemctl start qemu-guest-agent\nEOF\n\n  echo \"instance-id: $VM_NAME\" &gt; \"$CLOUDINIT_DIR/meta-data\"\n  echo \"local-hostname: $VM_NAME\" &gt;&gt; \"$CLOUDINIT_DIR/meta-data\"\n}\n\nfunction install_vm() {\n  echo \"Installing VM $VM_NAME...\"\n  virt-install \\\n    --connect qemu:///system \\\n    --name \"$VM_NAME\" \\\n    --memory \"$VM_MEMORY\" \\\n    --vcpus \"$VM_VCPUS\" \\\n    --disk path=\"$IMAGES_DIR/${VM_NAME}.qcow2\",format=qcow2,bus=virtio \\\n    --cloud-init user-data=\"$CLOUDINIT_DIR/user-data\",meta-data=\"$CLOUDINIT_DIR/meta-data\" \\\n    --os-variant \"$OS_VARIANT\" \\\n    --graphics none \\\n    --import \\\n    $NETWORK_PARAM \\\n    --noautoconsole\n}\n\nfunction enable_vm_autostart() {\n  echo \"Enabling autostart for $VM_NAME...\"\n  virsh autostart \"$VM_NAME\"\n}\n\nfunction finalize_vm_setup() {\n  echo \"Cleaning up temporary files for $VM_NAME...\"\n  rm -rf \"$CLOUDINIT_DIR\"\n}\n\nfunction main() {\n  parse_arguments \"$@\"\n  initialize_report\n\n  for i in $(seq 1 $VM_COUNT); do\n    VM_NAME=\"${VM_PREFIX}${i}\"\n\n    echo \"\\n=== Creating VM: $VM_NAME ===\"\n\n    prepare_disk\n    create_cloudinit_iso\n\n    if [ \"$NETWORK_MODE\" == \"direct\" ]; then\n      NETWORK_PARAM=\"--network type=direct,source=$NETWORK_SOURCE,source_mode=bridge,model=virtio\"\n    elif [ \"$NETWORK_MODE\" == \"network\" ]; then\n      NETWORK_PARAM=\"--network network=$NETWORK_SOURCE,model=virtio\"\n    elif [ \"$NETWORK_MODE\" == \"bridge\" ]; then\n      NETWORK_PARAM=\"--network bridge=$NETWORK_SOURCE,model=virtio\"\n    else\n      echo \"Error: Unsupported network mode $NETWORK_MODE\"\n      exit 4\n    fi\n\n    install_vm\n    enable_vm_autostart\n    finalize_vm_setup\n  done\n\n  echo \"\\n\u2705\u2705\u2705 All VMs created, configured, and should be visible in Cockpit!\"\n}\n\n# === Execute Main ===\nmain \"$@\"\n</code></pre> <p>Note</p> <p>1. How to generate a secure encrypted password for cloud-init:</p> <p>Run the following command to generate a SHA-512 (recommended) password hash:</p> <pre><code>openssl passwd -6\n</code></pre> <p>Example output: <pre><code>$6$Tg8r0q2XibH8O$yImySK8p2iC2R5L/KHKoXtfClh5UzQGkvz6YtD63At4V3BhUEH7uZ8fwS4vzw5dhB4Z53slYh7eUl6B2yRcE6/\n</code></pre></p> <p>When inserting the password into a cloud-init <code>user-data</code> YAML file, you must escape every <code>$</code> symbol with a backslash (<code>\\</code>) if you are inserting it through Bash scripts:</p> <pre><code>chpasswd:\n  list: |\n    ubuntu:\\$6\\$Tg8r0q2XibH8O\\$yImySK8p2iC2R5L/...\n  expire: false\n  encrypt: false\n</code></pre> <p>2. How to generate an SSH Ed25519 key pair:</p> <p>To create a modern and secure SSH key pair, run:</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <ul> <li>Save the key files in the default location (<code>~/.ssh/id_ed25519</code>).</li> <li>Public key is located at: <code>~/.ssh/id_ed25519.pub</code></li> </ul> <p>Use the public key content in your <code>cloud-init</code> under <code>ssh_authorized_keys</code>:</p> <pre><code>ssh_authorized_keys:\n  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB... your_email@example.com\n</code></pre>"},{"location":"install/common/prerequisites/","title":"Kubernetes Prerequisites","text":""},{"location":"install/common/prerequisites/#enable-ipv4-forwarding","title":"Enable IPv4 Forwarding","text":"<p>IPv4 forwarding is required for Kubernetes to route network traffic between Pods and Services.</p> <pre><code>sudo tee /etc/sysctl.d/k8s.conf &lt;&lt;EOF\nnet.ipv4.ip_forward = 1\nEOF\nsudo sysctl --system\n</code></pre> <p>Tip</p> <p>This change persists across reboots and applies immediately without requiring a restart.</p>"},{"location":"install/common/prerequisites/#check-bridge-network-settings","title":"Check Bridge Network Settings","text":"<p>Verify that netfilter settings are correctly applied:</p> <pre><code>sudo sysctl net.bridge.bridge-nf-call-iptables\nsudo sysctl net.bridge.bridge-nf-call-ip6tables\n</code></pre> <p>Note</p> <p>Both values should return <code>1</code>.</p>"},{"location":"install/common/prerequisites/#update-system-packages","title":"Update System Packages","text":"<p>First, update your local package cache to ensure you install the latest available version of containerd.</p> <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre> <p>Tip: Update Regularly</p> <p>Keeping your package lists updated ensures that you pull secure and stable versions of software packages.</p>"},{"location":"install/common/prerequisites/#install-containerd","title":"Install containerd","text":"<p><code>containerd</code> is a core container runtime used by Kubernetes for managing container lifecycle operations. Installing and configuring containerd correctly is crucial for setting up a stable Kubernetes environment.</p> <p>Install containerd using your system package manager.</p> <pre><code>sudo apt install -y containerd\n</code></pre> <p>Note</p> <p>No need to add additional repositories for containerd if you're using recent Ubuntu or Debian versions.</p>"},{"location":"install/common/prerequisites/#configure-containerd","title":"Configure containerd","text":"<p>Create a default configuration file and modify it if needed.</p> <pre><code>sudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n</code></pre> <p>Modify <code>/etc/containerd/config.toml</code> to ensure that containerd uses systemd for managing cgroups:</p> <pre><code>[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n  SystemdCgroup = true\n</code></pre> <p>Warning: Check config carefully</p> <p>Incorrect settings in <code>config.toml</code> can cause Kubernetes components like kubelet to fail starting.</p>"},{"location":"install/common/prerequisites/#enable-and-start-containerd","title":"Enable and Start containerd","text":"<p>Enable and start containerd to ensure it runs on boot:</p> <pre><code>sudo systemctl restart containerd\nsudo systemctl enable containerd\n</code></pre>"},{"location":"install/common/prerequisites/#conclusion","title":"Conclusion","text":"<p>You have now installed and configured containerd successfully! This runtime will act as the foundation for Kubernetes to manage and schedule containers across your cluster.</p> <p>Proceed to install Kubernetes components like <code>kubeadm</code>, <code>kubelet</code>, and <code>kubectl</code> in the next steps.</p>"},{"location":"install/kubeadm/k8s/","title":"Initialize Kubernetes Cluster","text":""},{"location":"install/kubeadm/k8s/#introduction","title":"Introduction","text":"<p>This guide walks you through initializing the Kubernetes control plane and joining worker nodes using <code>kubeadm</code>.</p>"},{"location":"install/kubeadm/k8s/#generate-kubeadm-config","title":"Generate kubeadm config","text":"<p>Note</p> <p>You can generate a default configuration file using <code>kubeadm config print init-defaults</code> and use it as a template.</p> <p>Create a file <code>kubeadm-config.yaml</code> with your configuration. Example:</p> <pre><code>apiVersion: kubeadm.k8s.io/v1beta4\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 192.168.1.37\n  bindPort: 6443\nnodeRegistration:\n  criSocket: unix:///var/run/containerd/containerd.sock\n  imagePullPolicy: IfNotPresent\n  imagePullSerial: true\n  name: node\n  taints: null\n---\napiVersion: kubeadm.k8s.io/v1beta3\nkind: ClusterConfiguration\nkubernetesVersion: 1.32.0\nnetworking:\n  podSubnet: 10.244.0.0/16\n  serviceSubnet: 10.96.0.0/12\ncontrollerManager:\n  extraArgs:\n    node-cidr-mask-size: \"22\"\n</code></pre>"},{"location":"install/kubeadm/k8s/#initialize-the-control-plane","title":"Initialize the Control Plane","text":"<p>Initialize your Kubernetes master node:</p> <pre><code>sudo kubeadm init --config=kubeadm-config.yaml\n</code></pre> <p>Warning</p> <p>Only run <code>kubeadm init</code> on the intended control plane node. Ensure that <code>kubeadm-config.yaml</code> is properly configured. Incorrect configuration may cause the cluster to fail initialization or behave unexpectedly.</p>"},{"location":"install/kubeadm/k8s/#configure-kubectl-access","title":"Configure kubectl Access","text":"<p>Set up your user to control the cluster:</p> <pre><code>mkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n</code></pre> <p>Tip</p> <p>Repeat this setup for any additional users who need access to <code>kubectl</code>.</p>"},{"location":"install/kubeadm/k8s/#install-a-cni-plugin","title":"Install a CNI Plugin","text":"<p>Deploy a networking plugin, such as Flannel:</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml\n</code></pre> <p>Warning</p> <p>Your cluster will not function properly until a CNI plugin is installed!</p>"},{"location":"install/kubeadm/k8s/#join-worker-nodes","title":"Join Worker Nodes","text":"<p>To add a worker node, use the command displayed after <code>kubeadm init</code> or create a new one:</p> <pre><code>kubeadm token create --print-join-command\n</code></pre> <p>Example usage:</p> <pre><code>sudo kubeadm join 192.168.1.37:6443 --token abcdef.0123456789abcdef \\\n    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>Warning</p> <p>Run this <code>kubeadm join</code> command on each worker node, not on the control plane (master) node.  This command will connect the worker to your Kubernetes cluster.</p> <p>Note</p> <p>The <code>--token</code> and <code>--discovery-token-ca-cert-hash</code> ensure that worker nodes securely join the cluster.</p>"},{"location":"install/kubeadm/k8s/#conclusion","title":"Conclusion","text":"<p>You have successfully initialized your Kubernetes cluster and connected worker nodes.  You are now ready to deploy applications and manage your cluster using <code>kubectl</code>.</p>"},{"location":"install/microk8s/","title":"MicroK8s","text":"<p>Simple single-node Kubernetes with MicroK8s.</p> <ul> <li>Single Node Setup</li> </ul>"},{"location":"install/microk8s/single-node/","title":"Single Node","text":"<p>Placeholder content.</p>"},{"location":"install/troubleshooting/","title":"Troubleshooting","text":"<p>This section provides help with common issues encountered during Kubernetes installation and operation.</p> <ul> <li>Kubeadm Issues</li> </ul>"},{"location":"install/troubleshooting/kubeadm-issues/","title":"kubeadm-issues","text":"<p>Placeholder content.</p>"},{"location":"networking/cni-plugins/","title":"Cni Plugins","text":"<p>Placeholder content.</p>"},{"location":"networking/flannel-calico/","title":"Flannel Calico","text":"<p>Placeholder content.</p>"},{"location":"networking/pod-network/","title":"Pod Network","text":"<p>Placeholder content.</p>"},{"location":"networking/service-network/","title":"Service Network","text":"<p>Placeholder content.</p>"},{"location":"security/best-practices/","title":"Best Practices","text":"<p>Placeholder content.</p>"},{"location":"security/secrets/","title":"Secrets","text":"<p>Placeholder content.</p>"},{"location":"security/tls/","title":"Tls","text":"<p>Placeholder content.</p>"}]}